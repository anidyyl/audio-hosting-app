services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: audio-hosting-postgres
    environment:
      POSTGRES_DB: audio_hosting_app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schemas:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:8-alpine
    container_name: audio-hosting-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # User Service
  user-service:
    build: ./backend/user-service
    container_name: audio-hosting-user-service
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/audio_hosting_app?schema=public
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/user-service:/app
      - /app/node_modules
    command: npm run dev

  # Audio Service
  audio-service:
    build: ./backend/audio-service
    container_name: audio-hosting-audio-service
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/audio_hosting_app?schema=public
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - UPLOAD_DIR=/app/uploads
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/audio-service:/app
      - /app/node_modules
      - uploads_data:/app/uploads
    command: npm run dev

  # Next.js Frontend
  frontend:
    build: ./frontend
    container_name: audio-hosting-frontend
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_USER_SERVICE_URL=${NEXT_PUBLIC_USER_SERVICE_URL}
      - NEXT_PUBLIC_AUDIO_SERVICE_URL=${NEXT_PUBLIC_AUDIO_SERVICE_URL}
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev

  # Caddy Reverse Proxy
  caddy:
    image: caddy:2-alpine
    container_name: audio-hosting-caddy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile
      - uploads_data:/app/uploads
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - frontend
      - user-service
      - audio-service

volumes:
  postgres_data:
  redis_data:
  uploads_data:
  caddy_data:
  caddy_config:
